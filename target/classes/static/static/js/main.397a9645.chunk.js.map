{"version":3,"sources":["AppNavbar.js","Home.js","TFGList.js","TFGEdit.js","App.js","reportWebVitals.js","index.js"],"names":["AppNavbar","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","isOpen","toggle","bind","_assertThisInitialized","_createClass","key","value","this","setState","_jsx","Navbar","color","dark","expand","children","NavbarBrand","tag","Link","to","Component","Home","apply","arguments","_jsxs","Container","fluid","Button","TFGList","tfgs","remove","_this2","fetch","then","response","json","data","_remove","_asyncToGenerator","_regeneratorRuntime","mark","_callee","email","_this3","wrap","_context","prev","next","concat","method","headers","updatedTFGs","_toConsumableArray","filter","i","stop","_x","_this4","tfgList","map","tfg","style","whiteSpace","nombre","titulo","tutor","status","ButtonGroup","size","onClick","className","Table","width","TFGEdit","emptyItem","pass","memoria","nota","item","handleChange","handleSubmit","_componentDidMount","match","params","sent","event","target","name","_objectSpread","_handleSubmit","_callee2","_context2","preventDefault","body","JSON","stringify","history","push","title","Form","onSubmit","FormGroup","Label","for","Input","type","id","onChange","autoComplete","withRouter","App","Router","Switch","Route","path","exact","component","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.397a9645.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Navbar, NavbarBrand} from 'reactstrap';\nimport {Link} from 'react-router-dom';\n\nexport default class AppNavbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {isOpen: false};\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return <Navbar color=\"dark\" dark expand=\"md\">\n            <NavbarBrand tag={Link} to=\"/\">Home</NavbarBrand>\n        </Navbar>;\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\nimport { Button, Container } from 'reactstrap';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n                    <Button color=\"link\"><Link to=\"/tfgs\">TFGs</Link></Button>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\n\nclass TFGList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {tfgs: []};\n        this.remove = this.remove.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('/tfgs')\n            .then(response => response.json())\n            .then(data => this.setState({tfgs: data}));\n    }\n\n    async remove(email) {\n        await fetch(`/tfgs/${email}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(() => {\n            let updatedTFGs = [...this.state.tfgs].filter(i => i.email !== email);\n            this.setState({tfgs: updatedTFGs});\n        });\n    }\n\n    render() {\n        const {tfgs} = this.state;\n\n        const tfgList = tfgs.map(tfg => {\n            return <tr key={tfg.email}>\n                <td style={{whiteSpace: 'nowrap'}}>{tfg.nombre}</td>\n                <td>{tfg.email}</td>\n                <td>{tfg.titulo}</td>\n                <td>{tfg.tutor}</td>\n                <td>{tfg.status}</td>\n                <td>\n                    <ButtonGroup>\n                        <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/tfgs/\" + tfg.email}>Edit</Button>\n                        <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(tfg.email)}>Delete</Button>\n                    </ButtonGroup>\n                </td>\n            </tr>\n        });\n\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n                    <div className=\"float-right\">\n                        <Button color=\"success\" tag={Link} to=\"/tfgs/new\">Add TFG</Button>\n                    </div>\n                    <h3>TFGs</h3>\n                    <Table className=\"mt-4\">\n                        <thead>\n                        <tr>\n                            <th width=\"15%\">Nombre</th>\n                            <th width=\"15%\">Email</th>\n                            <th width=\"15%\">Titulo</th>\n                            <th width=\"15%\">Tutor</th>\n                            <th width=\"10%\">Estado</th>\n                            <th width=\"30%\">Actions</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {tfgList}\n                        </tbody>\n                    </Table>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default TFGList;","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\n\nclass TFGEdit extends Component {\n\n    emptyItem = {\n        nombre: '',\n        email: '',\n        titulo: '',\n        tutor: '',\n        pass: '',\n        status: 1,\n        memoria: null,\n        nota: 0\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: this.emptyItem\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async componentDidMount() {\n        if (this.props.match.params.email !== 'new') { // \n            const tfg = await (await fetch(`/tfgs/${this.props.match.params.email}`)).json();\n            this.setState({item: tfg});\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let item = {...this.state.item};\n        item[name] = value;\n        this.setState({item});\n    }\n\nasync handleSubmit(event) {\n    event.preventDefault();\n    const {item} = this.state;\n\n    await fetch('/tfgs' + ((this.props.match.params.email !== 'new') ? '/' + item.email : ''), {\n        method: (this.props.match.params.email !== 'new') ? 'PUT' : 'POST', //(item.email) ? 'PUT' : 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(item),\n    });\n    this.props.history.push('/tfgs');\n}\n\n    render() {\n        const {item} = this.state;\n        const title = <h2>{item.email ? 'Edit TFG' : 'Add TFG'}</h2>;\n\n        return <div>\n            <AppNavbar/>\n            <Container>\n                {title}\n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label for=\"nombre\">Nombre</Label>\n                        <Input type=\"text\" name=\"nombre\" id=\"nombre\" value={item.nombre || ''}\n                               onChange={this.handleChange} autoComplete=\"nombre\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"email\">Email</Label>\n                        <Input type=\"text\" name=\"email\" id=\"email\" value={item.email || ''}\n                               onChange={this.handleChange} autoComplete=\"email\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"titulo\">Titulo</Label>\n                        <Input type=\"text\" name=\"titulo\" id=\"titulo\" value={item.titulo || ''}\n                               onChange={this.handleChange} autoComplete=\"titulo\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"tutor\">Tutor</Label>\n                        <Input type=\"text\" name=\"tutor\" id=\"tutor\" value={item.tutor || ''}\n                               onChange={this.handleChange} autoComplete=\"tutor\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"status\">Status</Label>\n                        <Input type=\"number\" name=\"status\" id=\"status\" value={item.status || ''}\n                               onChange={this.handleChange} autoComplete=\"status\"/>\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n                        <Button color=\"secondary\" tag={Link} to=\"/tfgs\">Cancel</Button>\n                    </FormGroup>\n                </Form>\n            </Container>\n        </div>\n    }\n}\n\nexport default withRouter(TFGEdit);","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport TFGList from './TFGList';\nimport TFGEdit from \"./TFGEdit\";\n\nclass App extends Component {\n  render() {\n    return (\n        <Router>\n          <Switch>\n            <Route path='/' exact={true} component={Home}/>\n            <Route path='/tfgs' exact={true} component={TFGList}/>\n            <Route path='/tfgs/:email' component={TFGEdit}/>\n          </Switch>\n        </Router>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}